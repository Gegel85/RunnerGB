CGB_A_INIT EQU $11 ; Accumulator starting value on a Gameboy Color

; Sound control
SOUND_TERM_CONTROL EQU $FF24
CHAN_TERM_SELECT EQU $FF25
DISABLE_CHANNELS_REGISTERS EQU $FF26

; Sound Channel 1
CHANNEL1_SWEEP EQU $FF10
CHANNEL1_LENGTH EQU $FF11
CHANNEL1_VOLUME EQU $FF12
CHANNEL1_LOW_FREQ EQU $FF13
CHANNEL1_HIGH_FREQ EQU $FF14

; Sound Channel 2
CHANNEL2_LENGTH EQU $FF16
CHANNEL2_VOLUME EQU $FF17
CHANNEL2_LOW_FREQ EQU $FF18
CHANNEL2_HIGH_FREQ EQU $FF19

; Sound channel 3
CHANNEL3_ON_OFF EQU $FF1A
CHANNEL3_LENGTH EQU $FF1B
CHANNEL3_OUTPUT EQU $FF1C
CHANNEL3_LOW_FREQ EQU $FF1D
CHANNEL3_HIGH_FREQ EQU $FF1E
WPRAM EQU $FF30

; Sound channel 4
CHANNEL4_LENGTH EQU $FF20
CHANNEL4_VOLUME EQU $FF21
CHANNEL4_POLY EQU $FF22
CHANNEL4_RESTART EQU $FF23

; LCD
LCD_CONTROL EQU $FF40
STAT_CONTROL EQU $FF41
LCD_BASE_CONTROL EQU %11110111
SCROLL_X EQU $FF43
SCROLL_Y EQU $FF42
LY EQU $FF44
LYC EQU $FF45
WX EQU $FF4B
WY EQU $FF4A
VBK EQU $FF4F

; VRAM
VRAM_START EQU $8000
VRAM_BG_START EQU $9800
VRAM_WIN_START EQU $9C00

; Joypad
JOYPAD_REGISTER EQU $FF00

; Interrupts
INTERRUPT_REQUEST EQU $FF0F
INTERRUPT_ENABLED EQU $FFFF
NO_INTERRUPT EQU 0
VBLANK_INTERRUPT EQU (1 << 0)
LCD_STAT_INTERRUPT EQU (1 << 1)
TIMER_INTERRUPT EQU (1 << 2)
SERIAL_INTERRUPT EQU (1 << 3)
JOYPAD_INTERRUPT EQU (1 << 4)

; Keys
RIGHT_BIT EQU 0
LEFT_BIT EQU 1
UP_BIT EQU 2
DOWN_BIT EQU 3
A_BIT EQU 4
B_BIT EQU 5
SELECT_BIT EQU 6
START_BIT EQU 7

; Timer registers
TIMA EQU $FF05
TMA EQU $FF06
TAC EQU $FF07

; Misc registers
DIV_REGISTER EQU $FF04
PALETTE_REGISTER EQU $FF47

; Music struct
RSRESET
CTRL_BYTE         RB 1 ; Bit 0: Active (0: Off 1: On)
                       ; Bit 1: Muted  (0: Off 1: On)
WAITING_TIME      RW 1
CURRENT_ELEM_PTR  RW 1
NB_REGISTERS      RB 1
REGISTERS_PTR     RW 1
FREQUENCY_PTR     RW 1
NB_REPEAT         RB 1
REPEAT_PTR        RW 1
MUSIC_STRUCT_SIZE RB 1

; Game registers
FRAME_COUNTER       EQU $C000 ; RB 1
RANDOM_REGISTER     EQU $C001 ; RB 1
ANIMATION_COUNTER   EQU $C002 ; RB 1
PLAYER_Y            EQU $C003 ; RB 1
PLAYER_SPEED_Y      EQU $C004 ; RB 1
PLAY_SPD_Y_DEC_CTN  EQU $C005 ; RB 1
SCORE               EQU $C006 ; RB 3
MOON_POS            EQU $C009 ; RB 1
NB_SPIKES           EQU $C00A ; RB 1
SPIKES              EQU $C00B ; RW 32
SPAWN_COUNTER       EQU $C04B ; RB 1
MAX_SCROLL          EQU $C04C ; RB 1
CURRENT_SCROLL      EQU $C04D ; RB 1
SCROLL_COUNTER      EQU $C04E ; RB 1
MAX_SCROLL_COUNTER  EQU $C04F ; RB 1
PLAYING_SFX_TIMERS  EQU $C050 ; RB 4
GROUND_POS          EQU $C054 ; RB 22
GROUND_POS_X8       EQU $C06A ; RB 22
LEFT_MAP_PTR        EQU $C080 ; RW 1
LEFT_MAP_SRC_TILES  EQU $C082 ; RW 1
RIGHT_MAP_PTR       EQU $C084 ; RW 1
RIGHT_MAP_SRC_TILES EQU $C086 ; RW 1
SCROLL_PAST_TILE    EQU $C088 ; RB 1
NB_REPEATED         EQU $CA00 ; RB 1
PLAYING_MUSICS      EQU $CA01 ; RB MUSIC_STRUCT_SIZE * 4
REGISTER_DUMP       EQU $CD10 ; RB 20
SPRITES_BUFFER      EQU $DE00 ; RB $A0

; DMG Palette
BGP EQU $FF47
OBP0 EQU $FF48
OBP1 EQU $FF49

; GBC Palette
BGPI EQU $FF68
BGPD EQU $FF69
OBPI EQU $FF6A
OBPB EQU $FF6B

; DMA
START_DMA EQU $FF46
DMA_DELAY EQU $28
DMA EQU $FF80
OAM_SRC_START EQU SPRITES_BUFFER / $100

; Music
SEMIQUAVER        EQU $4
QUAVER            EQU 2 * SEMIQUAVER
DOTTED_QUAVER     EQU QUAVER + SEMIQUAVER
CROTCHET          EQU 2 * QUAVER
DOTTED_CROTCHET   EQU 2 * DOTTED_QUAVER
MINIM             EQU 2 * CROTCHET
DOTTED_MINIM      EQU 2 * DOTTED_CROTCHET
SEMIBREVE         EQU 2 * MINIM
DOTTED_SEMIBREVE  EQU 2 * DOTTED_MINIM

; Notes
NOTE_A       EQU 220
NOTE_A_SHARP EQU 233
NOTE_Bb      EQU 233
NOTE_B       EQU 247
NOTE_C       EQU 262
NOTE_C_SHARP EQU 277
NOTE_Db      EQU 277
NOTE_D       EQU 294
NOTE_D_SHARP EQU 311
NOTE_Eb      EQU 311
NOTE_E       EQU 330
NOTE_F       EQU 349
NOTE_F_SHARP EQU 370
NOTE_Gb      EQU 370
NOTE_G       EQU 392
NOTE_G_SHARP EQU 415
NOTE_Ab      EQU 415

; Music header
RSRESET
TIMER_MODULO  RB 1
TIMER_CONTROL RB 1
NB_PROGRAMS   RB 1
PROGRAMS_PTRS RB 1

; Music commands
RSRESET
SET_FREQU     RB 1
SET_VOL       RB 1
WAIT          RB 1
JUMP          RB 1
DIS_TERM      RB 1
ENA_TERM      RB 1
SET_REGISTERS RB 1
STOP_MUS      RB 1
PLAY          RB 1
REPEAT        RB 1
CONTINUE      RB 1

continue: MACRO
	db CONTINUE
ENDM

repeat: MACRO
	db REPEAT
	db \1 - 1
ENDM

play: MACRO
	db PLAY
	db ((2048 - 131072 / (\1)) >> 8) | (\2)
ENDM

playRaw: MACRO
	db PLAY
	db \1
ENDM

setFrequency: MACRO ; setFrequency(byte frequency)
	db SET_FREQU
	dw (2048 - 131072 / (\1)) | ((\2)) << 8
ENDM

setFrequencyRaw: MACRO ; setFrequency(byte frequency)
	db SET_FREQU
	dw (\1) | ((\2)) << 8
ENDM

setVolume: MACRO ; setVolume(byte volume)
	db SET_VOL
	db \1
ENDM

setRegisters: MACRO ; setRegisters(byte values[nbRegisters])
	db SET_REGISTERS
	IF _NARG == 4
        	db \1, \2, \3, \4
	ELIF _NARG == 5
        	db \1, \2, \3, \4, \5
	ELSE
		PRINTT "setRegister should take either 4 or 5 arguments but "
		PRINTI _NARG
		PRINTT " were given."
		FAIL
        ENDC
ENDM

disableTerminals: MACRO ; disableTerminals(byte terminalsMask)
	db DIS_TERM
	db ~(\1)
ENDM

enableTerminals: MACRO ; enableTerminals(byte terminalsMask)
	db ENA_TERM
	db \1
ENDM

wait: MACRO ; wait(unsigned short units)
	db WAIT
	dw ((\1) + $100)
ENDM

jump: MACRO ; jump(unsigned addr)
	db JUMP
	dw \1
ENDM

stopMusic: MACRO ; stopMusic()
	db STOP_MUS
ENDM

writeRegisterI: MACRO
	push hl
	ld h, $CD
	ld [hl], \1
	pop hl
	ldi [hl], \1
ENDM

writeRegister: MACRO
	push hl
	ld h, $CD
	ld [hl], \1
	pop hl
	ld [hl], \1
ENDM